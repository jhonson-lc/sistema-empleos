datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CLIENT
  EMPLOYEE
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String     @id @default(cuid())
  email    String     @unique
  password String
  role     Role
  sessions Session[]
  client   Client[]
  employee Employee[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Client {
  id        String    @id @default(cuid())
  firstname String
  lastname  String
  email     String    @unique
  date      DateTime?
  phone     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  jobs      Jobs[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Employee {
  employeeId     String           @id @default(cuid())
  identification String
  firstname      String
  lastname       String
  email          String           @unique
  date           DateTime?
  phone          String
  city           String
  profession     String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
  references     References[]
  studies        Studies[]
  skills         Skills[]
  workexperience WorkExperience[]
  jobs           Jobs[]
  user           User?            @relation(fields: [userId], references: [id])
  userId         String?
}

model References {
  id          String   @id @default(cuid())
  firstname   String
  lastname    String
  phonenumber String
  relation    String?
  workerId    String
  employee    Employee @relation(fields: [workerId], references: [employeeId])
}

model Studies {
  id       String   @id @default(cuid())
  level    String
  school   String
  academic String
  workerId String
  employee Employee @relation(fields: [workerId], references: [employeeId])
}

model Skills {
  id          String   @id @default(cuid())
  description String
  workerId    String
  employee    Employee @relation(fields: [workerId], references: [employeeId])
}

model WorkExperience {
  id        String   @id @default(cuid())
  company   String
  position  String
  startDate DateTime
  endDate   DateTime
  phone     String
  workerId  String
  employee  Employee @relation(fields: [workerId], references: [employeeId])
}

model Jobs {
  id          String   @id @default(cuid())
  state       String
  valoration  Float
  description String
  createdAt   DateTime @default(now())
  workerId    String
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id])
  employee    Employee @relation(fields: [workerId], references: [employeeId])
}
